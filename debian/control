Source: libiterator-perl
Section: perl
Priority: optional
Maintainer: Debian Perl Group <pkg-perl-maintainers@lists.alioth.debian.org>
Uploaders: Axel Beckert <abe@debian.org>
Build-Depends: debhelper (>= 9)
Build-Depends-Indep: libexception-class-perl (>= 1.21),
                     perl
Standards-Version: 3.9.6
Vcs-Browser: https://anonscm.debian.org/cgit/pkg-perl/packages/libiterator-perl.git
Vcs-Git: git://anonscm.debian.org/pkg-perl/packages/libiterator-perl.git
Homepage: https://metacpan.org/release/Iterator
Testsuite: autopkgtest-pkg-perl

Package: libiterator-perl
Architecture: all
Depends: libexception-class-perl (>= 1.21),
         ${misc:Depends},
         ${perl:Depends}
Description: Perl implementation of iterators
 Iterator is meant to be the definitive implementation of iterators, as
 popularized by Mark Jason Dominus's lectures and recent book (Higher Order
 Perl, Morgan Kauffman, 2005).
 .
 An "iterator" is an object, represented as a code block that generates the
 "next value" of a sequence, and generally implemented as a closure. When you
 need a value to operate on, you pull it from the iterator. If it depends on
 other iterators, it pulls values from them when it needs to. Iterators can be
 chained together (see Iterator::Util for functions that help you do just
 that), queueing up work to be done but not actually doing it until a value is
 needed at the front end of the chain. At that time, one data value is pulled
 through the chain.
